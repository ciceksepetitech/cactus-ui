{
  "hooksList": {
    "useArray": {
      "title": "useArray",
      "type": {
        "val": "value: T[]",
        "clear": "clear: () => void",
        "isEmpty": "isEmpty: () => boolean",
        "push": "push: (value: T) => void",
        "set": "set: (value: T[]) => void",
        "includes": "includes: (value: T) => boolean",
        "remove": "remove: (value: number) => void",
        "map": "map: (fn: (value: T) => any) => any",
        "find": "find: (fn: (value: T) => any) => any",
        "filter": "filter: (fn: (value: T) => any) => any",
        "findIndex": "findIndex: (fn: (value: T) => any) => any"
      },
      "description": "Provides shortcuts for array functionalities"
    },
    "useIsCSR": {
      "title": "useIsCSR",
      "type": { "name": "() => {}" },
      "description": "Checks if the page is being rendered at the client-side or server-side. If returns true, it is client-side otherwise server-side"
    },
    "usePrevious": {
      "title": "usePrevious",
      "type": { "name": "value: T" },
      "description": "Holds a value with ref. Returns it every value change and updates with useEffect"
    },
    "useDebounce": {
      "title": "useDebounce",
      "type": {
        "text": "text : string",
        "delay": "delay : number"
      },
      "description": "Needed to limit component re-renders when a variable change frequently returns a debounced value after a timeout"
    },
    "useIsMounted": {
      "title": "useIsMounted",
      "type": { "name": "() => {}" },
      "description": "Returns a memoized callback function to retrieve isMounted boolean value. returns true if mounted, otherwise false"
    },
    "useLatestValue": {
      "title": "useLatestValue",
      "type": { "name": "value: MutableRefObject<T>" },
      "description": "Stores latest value with ref. Useful to get access to the latest value of some props or states inside an async callback, instead of at the time the callback was created"
    },
    "useForceUpdate": {
      "title": "useForceUpdate",
      "type": { "name": "() => void" },
      "description": "Force updates the component when needed. For instance, setting some states to the ref and needing to update when the ref has changed"
    },
    "useLocalStorage": {
      "title": "useLocalStorage",
      "type": {
        "value": "value: any",
        "setValue": "setValue:() => {}",
        "remove": "remove:() => {}"
      },
      "description": "Handles local storage interactions. Supports server-side rendering"
    },
    "useCombinedRefs": {
      "title": "useCombinedRefs",
      "type": {
        "forwardedRef": "forwardedRef : MutableRefObject<T>",
        "internalRef": "internalRef : MutableRefObject<T>"
      },
      "description": "Combines all passed props. Useful when React.forwardRef and the internal ref are needed at the same time"
    },
    "useEventListener": {
      "title": "useEventListener",
      "type": {
        "listener": "listener: (evt: Event): void",
        "name": "name: keyof HTMLElementEventMap | string",
        "target": "target: | Window | Document | EventTarget | HTMLElement | RefObject<any> | typeof globalThis| MutableRefObject<any>;"
      },
      "description": "Mounts and unmounts event listeners which stores all params in refs to avoid re-running effect for every render"
    },
    "useOnClickOutside": {
      "title": "useOnClickOutside",
      "type": {
        "specifiedNodeRef": "specifiedNodeRef: RefObject<T>",
        "callback": "callback: (event: MouseEvent | TouchEvent) => void"
      },
      "description": "Captures outside click of a specified area. Calls handler when outside of a specified area is clicked or touched"
    },
    "useFindTabbableElements": {
      "title": "useFindTabbableElements",
      "type": { "name": "node: HTMLElement[]" },
      "description": "Gets tabbable elements inside of passed nodeRef. The element is keyboard focusable ('tabbable'), as it is part of the document's sequential focus navigation order. The element is also focusable by a script and possibly the mouse (or pointer)"
    },
    "useFindFocusableElements": {
      "title": "useFindFocusableElements",
      "type": { "name": "node: HTMLElement[]" },
      "description": "Gets focusable elements inside of passed nodeRef. The element can be focused by a script (element.focus()) and possibly the mouse (or pointer), but not the keyboard"
    },
    "useIsomorphicLayoutEffect": {
      "title": "useIsomorphicLayoutEffect",
      "type": { "name": "() => {}" },
      "description": "Interchanges between useLayoutEffect() and useEffect() hooks depending on the type of document. If the type of document returns 'undefined' useLayoutEffect() hook will be called, otherwise useEffect()"
    }
  }
}
